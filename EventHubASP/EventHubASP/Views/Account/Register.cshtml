@model RegisterViewModel

<link rel="stylesheet" href="~/css/authUI.css" asp-append-version="true" />

<div class="form-page">
    <div class="form-container">
        <h2>Register</h2>
        <form asp-action="Register" method="post" class="mt-3" id="registerForm" novalidate>

            <div class="mb-3">
                <label asp-for="Username" class="label">Username</label>
                <div class="input-wrapper">
                    <input asp-for="Username" class="form-control form-control-username" autocomplete="off" aria-describedby="usernameError" placeholder="Username" />
                </div>
                <span asp-validation-for="Username" id="usernameError" class="text-danger validation-message" aria-live="polite"></span>
            </div>

            <div class="mb-3">
                <label asp-for="Email" class="label">Email</label>
                <div class="input-wrapper">
                    <input asp-for="Email" class="form-control form-control-email" autocomplete="off" aria-describedby="emailError" placeholder="Email" />
                </div>
                <span asp-validation-for="Email" id="emailError" class="text-danger validation-message" aria-live="polite"></span>
            </div>

            <div class="mb-3">
                <label asp-for="Password" class="label">Password</label>
                <div class="input-wrapper">
                    <input asp-for="Password" type="password" class="form-control form-control-password password-field" autocomplete="off" aria-describedby="passwordError" placeholder="Password" />
                    <span class="eye-icon" aria-label="Toggle password visibility">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
                            <path class="eye-open" d="M12 4C7 4 2.73 7.11 1 12c1.73 4.89 6 8 11 8s9.27-3.11 11-8c-1.73-4.89-6-8-11-8Zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6Zm0-10c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4Z" />
                            <path class="eye-slash" d="M2 2l20 20" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
                        </svg>
                    </span>
                </div>
                <span asp-validation-for="Password" id="passwordError" class="text-danger validation-message" aria-live="polite"></span>
            </div>

            <div class="mb-3">
                <label asp-for="ConfirmPassword" class="label">Confirm Password</label>
                <div class="input-wrapper">
                    <input asp-for="ConfirmPassword" type="password" class="form-control form-control-confirm-password password-field" autocomplete="off" aria-describedby="confirmPasswordError" placeholder="Confirm Password" />
                    <span class="eye-icon" aria-label="Toggle password visibility">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
                            <path class="eye-open" d="M12 4C7 4 2.73 7.11 1 12c1.73 4.89 6 8 11 8s9.27-3.11 11-8c-1.73-4.89-6-8-11-8Zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6Zm0-10c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4Z" />
                            <path class="eye-slash" d="M2 2l20 20" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
                        </svg>
                    </span>
                </div>
                <span asp-validation-for="ConfirmPassword" id="confirmPasswordError" class="text-danger validation-message" aria-live="polite"></span>
            </div>

            <button type="submit" class="submit" disabled>Register</button>

            <div class="login-link">
                Already have an account? <a href="/Account/Login">Log in here</a>.
            </div>
        </form>

        <partial name="_ValidationScriptsPartial"></partial>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('registerForm');
            const submitButton = form.querySelector('button[type="submit"]');
            const inputs = form.querySelectorAll('.form-control');
            const usernameInput = form.querySelector('input[name="Username"]');
            const emailInput = form.querySelector('input[name="Email"]');
            const passwordInput = form.querySelector('input[name="Password"]');
            const confirmPasswordInput = form.querySelector('input[name="ConfirmPassword"]');
            const eyeIcons = document.querySelectorAll('.eye-icon');

            const inputStates = {
                username: { hasBeenTouched: false, isValid: false, isFilled: false },
                email: { hasBeenTouched: false, isValid: false, isFilled: false },
                password: { hasBeenTouched: false, isValid: false, isFilled: false },
                confirmpassword: { hasBeenTouched: false, isValid: false, isFilled: false }
            };

            eyeIcons.forEach(icon => {
                icon.addEventListener('click', function () {
                    const input = this.previousElementSibling;
                    const slash = this.querySelector('.eye-slash');
                    input.type = input.type === 'password' ? 'text' : 'password';
                    slash.style.display = input.type === 'password' ? 'block' : 'none';
                });
            });

            function showValidationMessage(input, message) {
                const validationMessage = input.closest('.mb-3').querySelector('.validation-message');
                if (message) {
                    input.classList.add('input-validation-error');
                    input.classList.remove('validation-input-valid');
                    validationMessage.textContent = message;
                    validationMessage.classList.add('visible');
                } else {
                    input.classList.remove('input-validation-error');
                    input.classList.add('validation-input-valid');
                    validationMessage.textContent = "";
                    validationMessage.classList.remove('visible');
                }
            }

            function debounce(func, wait) {
                let timeout;
                return function (...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), wait);
                };
            }

            function checkUsernameAvailability(value) {
                return fetch('/Account/CheckUsername?username=' + encodeURIComponent(value), {
                    method: 'GET'
                })
                    .then(response => response.json())
                    .then(data => data.isAvailable)
                    .catch(() => false);
            }

            function checkEmailAvailability(value) {
                return fetch('/Account/CheckEmail?email=' + encodeURIComponent(value), {
                    method: 'GET'
                })
                    .then(response => response.json())
                    .then(data => data.isAvailable)
                    .catch(() => false);
            }

            async function validateUsername(sendMessage = false) {
                const value = usernameInput.value.trim();
                let message = "";
                inputStates.username.isFilled = value.length > 0;

                if (!inputStates.username.isFilled) {
                    message = "Username is required.";
                } else if (value.length < 3) {
                    message = "Username must be at least 3 characters long.";
                } else {
                    const isAvailable = await checkUsernameAvailability(value);
                    if (!isAvailable) {
                        message = "Username is already taken.";
                    }
                }

                inputStates.username.isValid = !message;
                if (sendMessage && !inputStates.username.isValid) {
                    showValidationMessage(usernameInput, message);
                } else if (inputStates.username.isValid && inputStates.username.hasBeenTouched) {
                    showValidationMessage(usernameInput, "");
                }
                return inputStates.username.isValid;
            }

            async function validateEmail(sendMessage = false) {
                const value = emailInput.value.trim();
                let message = "";
                inputStates.email.isFilled = value.length > 0;

                if (!inputStates.email.isFilled) {
                    message = "Email is required.";
                } else {
                    const emailPattern = /^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                    if (!emailPattern.test(value)) {
                        message = "Please enter a valid email address.";
                    } else {
                        const isAvailable = await checkEmailAvailability(value);
                        if (!isAvailable) {
                            message = "Email is already registered.";
                        }
                    }
                }

                inputStates.email.isValid = !message;
                if (sendMessage && !inputStates.email.isValid) {
                    showValidationMessage(emailInput, message);
                } else if (inputStates.email.isValid && inputStates.email.hasBeenTouched) {
                    showValidationMessage(emailInput, "");
                }
                return inputStates.email.isValid;
            }

            function validatePassword(sendMessage = false) {
                const value = passwordInput.value.trim();
                let message = "";
                inputStates.password.isFilled = value.length > 0;

                if (!inputStates.password.isFilled) {
                    message = "Password is required.";
                } else if (value.length < 6) {
                    message = "Password must be at least 6 characters long.";
                } else if (!/\d/.test(value)) {
                    message = "Password must contain at least one number.";
                } else if (!/[A-Z]/.test(value)) {
                    message = "Password must contain at least one uppercase letter.";
                } else if (!/[a-z]/.test(value)) {
                    message = "Password must contain at least one lowercase letter.";
                }

                inputStates.password.isValid = !message;
                if (sendMessage && !inputStates.password.isValid) {
                    showValidationMessage(passwordInput, message);
                } else if (inputStates.password.isValid && inputStates.password.hasBeenTouched) {
                    showValidationMessage(passwordInput, "");
                }
                return inputStates.password.isValid;
            }

            function validateConfirmPassword(sendMessage = false) {
                const value = confirmPasswordInput.value.trim();
                let message = "";
                inputStates.confirmpassword.isFilled = value.length > 0;

                if (!inputStates.confirmpassword.isFilled) {
                    message = "Confirm Password is required.";
                } else if (value !== passwordInput.value) {
                    message = "Passwords do not match.";
                }

                inputStates.confirmpassword.isValid = !message;
                if (sendMessage && !inputStates.confirmpassword.isValid) {
                    showValidationMessage(confirmPasswordInput, message);
                } else if (inputStates.confirmpassword.isValid && inputStates.confirmpassword.hasBeenTouched) {
                    showValidationMessage(confirmPasswordInput, "");
                }
                return inputStates.confirmpassword.isValid;
            }

            function areAllFieldsFilledAndValid() {
                return inputStates.username.isFilled && inputStates.username.isValid &&
                    inputStates.email.isFilled && inputStates.email.isValid &&
                    inputStates.password.isFilled && inputStates.password.isValid &&
                    inputStates.confirmpassword.isFilled && inputStates.confirmpassword.isValid;
            }

            const debouncedCheckFormValidity = debounce(async function (input) {
                const validations = {
                    Username: validateUsername,
                    Email: validateEmail,
                    Password: validatePassword,
                    ConfirmPassword: validateConfirmPassword
                };
                const inputName = input.name;
                const validateFunc = validations[inputName];

                if (validateFunc) {
                    await validateFunc(true);
                }

                submitButton.disabled = !areAllFieldsFilledAndValid();
            }, 300);

            inputs.forEach(input => {
                input.addEventListener('input', async function () {
                    const state = inputStates[input.name.toLowerCase()];
                    state.hasBeenTouched = true;
                    await debouncedCheckFormValidity(input);
                });

                input.addEventListener('blur', async function () {
                    const state = inputStates[input.name.toLowerCase()];
                    if (state.hasBeenTouched) {
                        await debouncedCheckFormValidity(input);
                    }
                });
            });

            form.addEventListener('submit', async function (event) {
                await Promise.all([
                    validateUsername(true),
                    validateEmail(true),
                    validatePassword(true),
                    validateConfirmPassword(true)
                ]);
                submitButton.disabled = !areAllFieldsFilledAndValid();
                if (submitButton.disabled) {
                    event.preventDefault();
                }
            });

            document.querySelectorAll('.validation-message').forEach(error => {
                if (error.textContent.trim() !== "") {
                    error.classList.add('visible');
                    const input = error.closest('.mb-3').querySelector('.form-control');
                    if (input) {
                        input.classList.add('input-validation-error');
                        const state = inputStates[input.name.toLowerCase()];
                        state.hasBeenTouched = true;
                        state.isValid = false;
                        state.isFilled = input.value.trim().length > 0;
                    }
                }
            });
        });
    </script>
}