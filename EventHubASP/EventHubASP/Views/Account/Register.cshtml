@model RegisterViewModel

<link rel="stylesheet" href="~/css/authUI.css" asp-append-version="true" />

<div class="form-page">
    <div class="form-container">
        <h2>Register</h2>
        <form asp-action="Register" method="post" class="mt-3" id="registerForm" novalidate>

            <div class="mb-3">
                <label asp-for="Username" class="label">Username</label>
                <div class="input-wrapper">
                    <input asp-for="Username" class="form-control form-control-username" autocomplete="off" aria-describedby="usernameError" />
                </div>
                <span asp-validation-for="Username" id="usernameError" class="text-danger validation-message" aria-live="polite"></span>
            </div>

            <div class="mb-3">
                <label asp-for="Email" class="label">Email</label>
                <div class="input-wrapper">
                    <input asp-for="Email" class="form-control form-control-email" autocomplete="off" aria-describedby="emailError" />
                </div>
                <span asp-validation-for="Email" id="emailError" class="text-danger validation-message" aria-live="polite"></span>
            </div>

            <div class="mb-3">
                <label asp-for="Password" class="label">Password</label>
                <div class="input-wrapper">
                    <input asp-for="Password" type="password" class="form-control form-control-password password-field" autocomplete="off" aria-describedby="passwordError" />
                    <span class="eye-icon" aria-label="Toggle password visibility">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
                            <path class="eye-open" d="M12 4C7 4 2.73 7.11 1 12c1.73 4.89 6 8 11 8s9.27-3.11 11-8c-1.73-4.89-6-8-11-8Zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6Zm0-10c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4Z" />
                            <path class="eye-slash" d="M2 2l20 20" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
                        </svg>
                    </span>
                </div>
                <span asp-validation-for="Password" id="passwordError" class="text-danger validation-message" aria-live="polite"></span>
            </div>

            <div class="mb-3">
                <label asp-for="ConfirmPassword" class="label">Confirm Password</label>
                <div class="input-wrapper">
                    <input asp-for="ConfirmPassword" type="password" class="form-control form-control-confirm-password password-field" autocomplete="off" aria-describedby="confirmPasswordError" />
                    <span class="eye-icon" aria-label="Toggle password visibility">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
                            <path class="eye-open" d="M12 4C7 4 2.73 7.11 1 12c1.73 4.89 6 8 11 8s9.27-3.11 11-8c-1.73-4.89-6-8-11-8Zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6Zm0-10c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4Z" />
                            <path class="eye-slash" d="M2 2l20 20" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
                        </svg>
                    </span>
                </div>
                <span asp-validation-for="ConfirmPassword" id="confirmPasswordError" class="text-danger validation-message" aria-live="polite"></span>
            </div>

            <button type="submit" class="submit" disabled>Register</button>

            <div class="login-link">
                Already have an account? <a href="/Account/Login">Log in here</a>.
            </div>
        </form>

        <partial name="_ValidationScriptsPartial"></partial>
    </div>
</div>
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('registerForm');
            const submitButton = form.querySelector('button[type="submit"]');
            const inputs = form.querySelectorAll('.form-control');

            const usernameInput = form.querySelector('input[name="Username"]');
            const emailInput = form.querySelector('input[name="Email"]');
            const passwordInput = form.querySelector('input[name="Password"]');
            const confirmPasswordInput = form.querySelector('input[name="ConfirmPassword"]');
            const eyeIcons = document.querySelectorAll('.eye-icon');

            eyeIcons.forEach(icon => {
                icon.addEventListener('click', function () {
                    const input = this.previousElementSibling;
                    const svg = this.querySelector('.eye-svg');
                    const slash = this.querySelector('.eye-slash');

                    if (input.type === 'password') {
                        input.type = 'text';
                        slash.style.display = 'none'; // Hide the slash
                    } else {
                        input.type = 'password';
                        slash.style.display = 'block'; // Show the slash again
                    }
                });
            });
            // eyeSlashes.forEach(slash> {
            //     slash.addEventListener('click', function () {
            //         const input = this.previousElementSibling;
            //         if (input.type === 'password') {
            //             input.type = 'text';
            //             this.classList.add('active');
            //         } else {
            //             input.type = 'password';
            //             this.classList.remove('active');
            //         }
            //     });
            // });

            function showValidationMessage(input, message) {
                const validationMessage = input.closest('.mb-3').querySelector('.validation-message');
                if (message) {
                    input.classList.add('input-validation-error');
                    input.classList.remove('validation-input-valid');
                    validationMessage.textContent = message;
                    validationMessage.classList.add('visible');
                } else {
                    input.classList.remove('input-validation-error');
                    input.classList.add('validation-input-valid');
                    validationMessage.textContent = "";
                    validationMessage.classList.remove('visible');
                }
            }

            function validateUsername() {
                const value = usernameInput.value.trim();
                if (value.length < 3) {
                    showValidationMessage(usernameInput, "Username must be at least 3 characters long.");
                    return false;
                }
                showValidationMessage(usernameInput, "");
                return true;
            }

            function validateEmail() {
                const value = emailInput.value.trim();
                const emailPattern = /^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                if (!emailPattern.test(value)) {
                    showValidationMessage(emailInput, "Please enter a valid email address.");
                    return false;
                }
                showValidationMessage(emailInput, "");
                return true;
            }

            function validatePassword() {
                const value = passwordInput.value.trim();
                if (value.length < 6) {
                    showValidationMessage(passwordInput, "Password must be at least 6 characters long.");
                    return false;
                }
                showValidationMessage(passwordInput, "");
                return true;
            }

            function validateConfirmPassword() {
                if (confirmPasswordInput.value !== passwordInput.value) {
                    showValidationMessage(confirmPasswordInput, "Passwords do not match.");
                    return false;
                }
                showValidationMessage(confirmPasswordInput, "");
                return true;
            }

            function checkFormValidity() {
                const isValid = validateUsername() && validateEmail() && validatePassword() && validateConfirmPassword();
                submitButton.disabled = !isValid;
            }

            inputs.forEach(input => {
                input.addEventListener('input', checkFormValidity);
            });

            form.addEventListener('submit', function (event) {
                checkFormValidity();
                if (submitButton.disabled) {
                    event.preventDefault();
                }
            });

            // Check server-side validation errors on page load
            document.querySelectorAll('.validation-message').forEach(error => {
                if (error.textContent.trim() !== "") {
                    error.classList.add('visible');
                }
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $("form").validate();
        });
    </script>
}
