@model IEnumerable<EventHubASP.Models.Event>
@{
    var filter = ViewBag.Filter as EventHubASP.Models.EventFilterViewModel ?? new EventHubASP.Models.EventFilterViewModel();
}

<link rel="stylesheet" href="~/css/browseEvents.css" asp-append-version="true" />

<div class="hero">
    <div class="container browse-events-container">
        @if (User.IsInRole("Admin"))
        {
            <h2 class="main-title">Delete Event</h2>
        }
        else
        {
            <h2 class="main-title">Browse Events</h2>
        }

        <div class="filter-search-container">
            <div class="filter-wrapper">
                <button id="filterToggleButton" class="filter-toggle-button">
                    <svg width="19" height="19" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                        <path d="M22 3H2l8 9.46V19l4 2V12.46L22 3z"></path>
                    </svg>
                    Filter Events
                </button>
                <button id="clearFiltersButton" class="clear-btn">
                    <span>Clear</span>
                </button>
                <div id="filterSection" class="filter-section">
                    <form method="get" action="/Event/BrowseEvents" class="filter-form">
                        <div class="form-group">
                            <input type="checkbox" id="sortByDate" name="SortByDate" value="true" @(filter.SortByDate ? "checked" : "") />
                            <label for="sortByDate">Sort by Date [Newest]</label>
                        </div>
                        <div class="form-group">
                            <input type="checkbox" id="sortByTitleLength" name="SortByTitleLength" value="true" @(filter.SortByTitleLength ? "checked" : "") />
                            <label for="sortByTitleLength">Sort by Title [A-Z]</label>
                        </div>
                        <div class="form-group">
                            <label for="filterByDate">Filter by Date</label>
                            <input type="date" min="" id="filterByDate" name="FilterByDate" value="@(filter.FilterByDate?.ToString("yyyy-MM-dd") ?? "")" />
                        </div>
                        <button type="submit" class="btn apply-filter-button">Apply Filters</button>
                    </form>
                </div>
            </div>

            <div class="search-bar">
                <input type="text" id="searchInput" placeholder="Search events..." value="@(filter.SearchQuery ?? "")" />
                <span id="clearSearch" class="clear-search-icon">×</span>
            </div>
        </div>
        <div class="row events-container" id="eventsContainer">
            @if (Model.Count() != 0)
            {
                @foreach (var eventItem in Model)
                {
                    <div class="col-md-4 event-item" data-title="@eventItem.Title.ToLower()">
                        <a asp-action="Details" asp-controller="Event" asp-route-id="@eventItem.EventID" class="event-link">
                            <div class="event-card">
                                <div class="event-card-inner">
                                    <img src="@eventItem.ImageUrl" class="event-image" alt="Event Image">
                                    <div class="event-details">
                                        <h5 class="event-title">@eventItem.Title</h5>
                                        <p class="event-description">@eventItem.Description</p>
                                        <p class="event-meta"><strong>Date:</strong> @eventItem.Date.ToString("MMM dd, yyyy")</p>
                                        <p class="event-meta"><strong>Location:</strong> @eventItem.Location</p>
                                        <div class="event-buttons">
                                            @if (User.IsInRole("Admin"))
                                            {
                                                <form method="post" action="/Event/DeleteEvent">
                                                    <input type="hidden" name="eventId" value="@eventItem.EventID" />
                                                    <button type="submit" class="btn btn-danger"
                                                            onclick="return confirm('Are you sure you want to delete this event?');">
                                                        Delete Event
                                                    </button>
                                                </form>
                                            }
                                            else if (User.IsInRole("User"))
                                            {
                                                <form method="post" asp-controller="Event" asp-action="Subscribe">
                                                    <input type="hidden" name="eventId" value="@eventItem.EventID" />
                                                    <button type="submit" class="btn btn-primary">Subscribe</button>
                                                </form>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            }
            else
            {
                <h5 class="no-events">No Events Available</h5>
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const filterToggleButton = document.getElementById('filterToggleButton');
        const clearFiltersButton = document.getElementById('clearFiltersButton');
        const filterSection = document.getElementById('filterSection');
        const searchInput = document.getElementById('searchInput');
        const clearSearchIcon = document.getElementById('clearSearch');
        const eventsContainer = document.getElementById('eventsContainer');
        const eventItems = document.querySelectorAll('.event-item');
        const today = new Date().toISOString().split('T')[0];
        document.querySelector('#filterByDate').setAttribute('min', today);

        let containerHeight = eventsContainer.offsetHeight;
        eventsContainer.style.minHeight = `${containerHeight}px`;

        filterToggleButton.addEventListener('mouseenter', () => {
            filterSection.style.display = 'block';
            setTimeout(() => { filterSection.style.opacity = '1'; }, 10);
            filterToggleButton.classList.add('hover');
        });

        filterToggleButton.addEventListener('mouseleave', () => {
            if (!filterSection.matches(':hover')) {
                filterSection.style.opacity = '0';
                setTimeout(() => { filterSection.style.display = 'none'; }, 300);
                filterToggleButton.classList.remove('hover');
            }
        });

        filterSection.addEventListener('mouseenter', () => {
            filterSection.style.display = 'block';
            filterSection.style.opacity = '1';
            filterToggleButton.classList.add('hover');
        });

        filterSection.addEventListener('mouseleave', () => {
            if (!filterToggleButton.matches(':hover')) {
                filterSection.style.opacity = '0';
                setTimeout(() => { filterSection.style.display = 'none'; }, 300);
                filterToggleButton.classList.remove('hover');
            }
        });

        eventItems.forEach(item => {
            item.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        });

        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        const performSearch = debounce(function (query) {
            let visibleCount = 0;
            const matchingItems = [];
            const nonMatchingItems = [];

            eventItems.forEach(item => {
                const title = item.getAttribute('data-title');
                if (title.includes(query)) {
                    matchingItems.push(item);
                    visibleCount++;
                } else {
                    nonMatchingItems.push(item);
                }
            });

            if (visibleCount === 0 && query !== '') {
                if (!document.querySelector('.no-search-results')) {
                    const noResults = document.createElement('div');
                    noResults.className = 'no-search-results';
                    noResults.textContent = 'No events match your search';
                    noResults.style.width = '100%';
                    noResults.style.textAlign = 'center';
                    noResults.style.padding = '2rem';
                    noResults.style.opacity = '0';
                    eventsContainer.appendChild(noResults);

                    void noResults.offsetWidth;
                    noResults.style.transition = 'opacity 0.3s ease';
                    noResults.style.opacity = '1';
                }
            } else {
                const noResults = document.querySelector('.no-search-results');
                if (noResults) {
                    noResults.style.opacity = '0';
                    setTimeout(() => noResults.remove(), 300);
                }
            }

            nonMatchingItems.forEach(item => {
                if (item.style.display !== 'none') {
                    item.style.opacity = '0';
                    item.style.transform = 'scale(0.95)';
                }
            });

            setTimeout(() => {
                nonMatchingItems.forEach(item => {
                    item.style.display = 'none';
                });

                matchingItems.forEach(item => {
                    if (item.style.display === 'none') {
                        item.style.opacity = '0';
                        item.style.transform = 'scale(0.95)';
                        item.style.display = 'block';
                        void item.offsetWidth;
                        item.style.opacity = '1';
                        item.style.transform = 'scale(1)';
                    } else if (item.style.opacity !== '1') {
                        item.style.opacity = '1';
                        item.style.transform = 'scale(1)';
                    }
                });
            }, 300);
        }, 250);

        function clearAllFiltersAndSearch() {
            const sortByDateCheckbox = document.getElementById('sortByDate');
            const sortByTitleLengthCheckbox = document.getElementById('sortByTitleLength');
            const filterByDateInput = document.getElementById('filterByDate');

            if (sortByDateCheckbox) sortByDateCheckbox.checked = false;
            if (sortByTitleLengthCheckbox) sortByTitleLengthCheckbox.checked = false;
            if (filterByDateInput) filterByDateInput.value = '';
            searchInput.value = '';
            clearSearchIcon.style.display = 'none';

            filterToggleButton.style.transform = 'scale(1.05)';
            setTimeout(() => {
                filterToggleButton.style.transform = 'scale(1)';
            }, 200);

            const successMessage = document.createElement('div');
            successMessage.textContent = 'Filters and search cleared';
            successMessage.className = 'filter-reset-message';
            successMessage.style.position = 'fixed';
            successMessage.style.top = '20px';
            successMessage.style.right = '20px';
            successMessage.style.padding = '10px 20px';
            successMessage.style.backgroundColor = '#28a745';
            successMessage.style.color = 'white';
            successMessage.style.borderRadius = '4px';
            successMessage.style.opacity = '0';
            successMessage.style.transition = 'opacity 0.3s ease';
            document.body.appendChild(successMessage);

            setTimeout(() => { successMessage.style.opacity = '1'; }, 10);
            setTimeout(() => {
                successMessage.style.opacity = '0';
                setTimeout(() => {
                    successMessage.remove();
                    window.location.href = '/Event/BrowseEvents';
                }, 300);
            }, 1000); // Reduced duration to make it snappier
        }

        clearSearchIcon.addEventListener('click', () => {
            searchInput.value = '';
            performSearch('');
            clearSearchIcon.style.display = 'none';
        });

        searchInput.addEventListener('input', function () {
            const query = this.value.toLowerCase().trim();
            performSearch(query);
            clearSearchIcon.style.display = query ? 'block' : 'none';
        });

        clearSearchIcon.style.display = searchInput.value.trim() ? 'block' : 'none';

        clearFiltersButton.addEventListener('click', clearAllFiltersAndSearch);

        if (searchInput.value.trim() !== '') {
            performSearch(searchInput.value.toLowerCase().trim());
        }
    });
</script>